<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI on advika-blog</title>
    <link>https://advika.dev/categories/ai/</link>
    <description>Recent content in AI on advika-blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jul 2025 18:14:53 -0700</lastBuildDate>
    <atom:link href="https://advika.dev/categories/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Model Context Protocol: An Overview</title>
      <link>https://advika.dev/mcp/</link>
      <pubDate>Sun, 27 Jul 2025 18:14:53 -0700</pubDate>
      <guid>https://advika.dev/mcp/</guid>
      <description>&lt;h1 id=&#34;what-is-mcp&#34;&gt;What is MCP?&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Model Context Protocol&lt;/strong&gt; is the “USB-C” or the “glue” of agentic AI—a protocol developed by Anthropic to standardize how tools, resources, prompts, and more (i.e. context) are exposed to AI agents. Its name effectively describes its job:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; - the large language model used within the AI agent&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt; - the preliminary information given to a model to produce output that is relevant and accurate to the needs of the developer&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Protocol&lt;/strong&gt; - the set of rules outlining how an agent can communicate with a server to receive necessary context; MCP creates a universal version of these rules&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;architecture&#34;&gt;Architecture&lt;/h1&gt;&#xA;&lt;p&gt;MCP can be broken down into three components: the host, the client, and the server. The &lt;strong&gt;host&lt;/strong&gt; is the agent itself. It contains and manages the LLM application as well as the MCP client. The &lt;strong&gt;client&lt;/strong&gt; is the implementation layer that creates the link between the host and the server via the Model Context Protocol. The &lt;strong&gt;server&lt;/strong&gt; exposes the context that the host wishes to access. It accesses external local or remote data sources to extract the desired information.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
